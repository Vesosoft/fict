/*! chessboard-0.3.0.min.js - with FEN rendering */
(function(){
  function Chessboard(id, config){
    this.id = id;
    this.positionFen = config.position || 'start';
    this.draggable = config.draggable || false;
    this.element = document.getElementById(id);
    this.render();
    if(this.positionFen !== 'start') this.position(this.positionFen);
  }

  Chessboard.prototype.render = function(){
    if(!this.element){
      console.error('Chessboard element not found');
      return;
    }
    this.element.innerHTML = '';
    this.element.className = 'chessboard';
    for(let i=0; i<64; i++){
      const square = document.createElement('div');
      square.className = 'square ' + ((Math.floor(i/8)+i)%2===0 ? 'white' : 'black');
      this.element.appendChild(square);
    }
  };

  Chessboard.prototype.position = function(fen){
    if(!fen) return;
    const pieceMap = {
      p:'♟', r:'♜', n:'♞', b:'♝', q:'♛', k:'♚',
      P:'♙', R:'♖', N:'♘', B:'♗', Q:'♕', K:'♔'
    };
    const squares = this.element.children;
    // Изчистване
    for(const sq of squares){
      sq.innerHTML = '';
    }
    const rows = fen.split(' ')[0].split('/');
    for(let y=0; y<8; y++){
      let x=0;
      for(const ch of rows[y]){
        if(!isNaN(ch)){
          x += parseInt(ch);
        } else {
          const i = y*8 + x;
          const piece = document.createElement('div');
          piece.className = 'piece';
          piece.textContent = pieceMap[ch] || '';
          squares[i].appendChild(piece);
          x++;
        }
      }
    }
  };

  window.Chessboard = Chessboard;
})();
